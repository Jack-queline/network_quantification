import torch
import torch.nn as nn
import torch.nn.functional as F

from module import *


class Net(nn.Module):

    def __init__(self, num_channels=1):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 3, 1, 1)
        self.conv2 = nn.Conv2d(6, 16, 3, 1, 1)
        self.conv3 = nn.Conv2d(16, 32, 3, 1, 1)
        self.conv4 = nn.Conv2d(32, 64, 3, 1, 1)
        self.conv5 = nn.Conv2d(64, 128, 3, 1, 1)
        # 全连接层
        self.fc1 = nn.Linear(128, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.max_pool2d(x, 2, 2)
        x = F.relu(self.conv2(x))
        x = F.max_pool2d(x, 2, 2)
        x = F.relu(self.conv3(x))
        x = F.max_pool2d(x, 2, 2)
        x = F.relu(self.conv4(x))
        x = F.max_pool2d(x, 2, 2)
        x = F.relu(self.conv5(x))
        x = F.max_pool2d(x, 2, 2)
        x = x.view(-1, 128)
        x = self.fc1(x)
        x = F.relu(x)
        x = self.fc2(x)
        x = F.relu(x)
        x = self.fc3(x)
        return x

    def quantize(self, num_bits=8):
        self.qconv1 = QConv2d(self.conv1, qi=True, qo=True, num_bits=num_bits)
        self.qrelu1 = QReLU()
        self.qmaxpool2d_1 = QMaxPooling2d(kernel_size=2, stride=2, padding=0)
        self.qconv2 = QConv2d(self.conv2, qi=False, qo=True, num_bits=4)
        self.qrelu2 = QReLU()
        self.qmaxpool2d_2 = QMaxPooling2d(kernel_size=2, stride=2, padding=0)
        self.qconv3 = QConv2d(self.conv3, qi=False, qo=True, num_bits=4)
        self.qrelu3 = QReLU()
        self.qmaxpool2d_3 = QMaxPooling2d(kernel_size=2, stride=2, padding=0)
        self.qconv4 = QConv2d(self.conv4, qi=False, qo=True, num_bits=4)
        self.qrelu4 = QReLU()
        self.qmaxpool2d_4 = QMaxPooling2d(kernel_size=2, stride=2, padding=0)
        self.qconv5 = QConv2d(self.conv5, qi=False, qo=True, num_bits=4)
        self.qrelu5 = QReLU()
        self.qmaxpool2d_5 = QMaxPooling2d(kernel_size=2, stride=2, padding=0)
        self.qfc1 = QLinear(self.fc1, qi=False, qo=True, num_bits=4)
        self.qrelu6 = QReLU()
        self.qfc2 = QLinear(self.fc2, qi=False, qo=True, num_bits=4)
        self.qrelu7 = QReLU()
        self.qfc3 = QLinear(self.fc3, qi=False, qo=True, num_bits=num_bits)

    def quantize_forward(self, x):
        x = self.qconv1(x)
        x = self.qrelu1(x)
        x = self.qmaxpool2d_1(x)
        x = self.qconv2(x)
        x = self.qrelu2(x)
        x = self.qmaxpool2d_2(x)
        x = self.qconv3(x)
        x = self.qrelu3(x)
        x = self.qmaxpool2d_3(x)
        x = self.qconv4(x)
        x = self.qrelu4(x)
        x = self.qmaxpool2d_4(x)
        x = self.qconv5(x)
        x = self.qrelu5(x)
        x = self.qmaxpool2d_5(x)
        x = x.view(-1, 128)
        x = self.qfc1(x)
        x = self.qrelu6(x)
        x = self.qfc2(x)
        x = self.qrelu7(x)
        x = self.qfc3(x)
        return x

    def freeze(self):
        self.qconv1.freeze()
        self.qrelu1.freeze(self.qconv1.qo)
        self.qmaxpool2d_1.freeze(self.qconv1.qo)
        self.qconv2.freeze(qi=self.qconv1.qo)
        self.qrelu2.freeze(self.qconv2.qo)
        self.qmaxpool2d_2.freeze(self.qconv2.qo)
        self.qconv3.freeze(qi=self.qconv2.qo)
        self.qrelu3.freeze(self.qconv3.qo)
        self.qmaxpool2d_3.freeze(self.qconv3.qo)
        self.qconv4.freeze(qi=self.qconv3.qo)
        self.qrelu4.freeze(self.qconv4.qo)
        self.qmaxpool2d_4.freeze(self.qconv4.qo)
        self.qconv5.freeze(qi=self.qconv4.qo)
        self.qrelu5.freeze(self.qconv5.qo)
        self.qmaxpool2d_5.freeze(self.qconv5.qo)
        self.qfc1.freeze(qi=self.qconv5.qo)
        self.qrelu6.freeze(self.qfc1.qo)
        self.qfc2.freeze(qi=self.qfc1.qo)
        self.qrelu7.freeze(self.qfc2.qo)
        self.qfc3.freeze(qi=self.qfc2.qo)

    def quantize_inference(self, x):
        qx = self.qconv1.qi.quantize_tensor(x)
        qx = self.qconv1.quantize_inference(qx)
        qx = self.qrelu1.quantize_inference(qx)
        qx = self.qmaxpool2d_1.quantize_inference(qx)
        qx = self.qconv2.quantize_inference(qx)
        qx = self.qrelu2.quantize_inference(qx)
        qx = self.qmaxpool2d_2.quantize_inference(qx)
        qx = self.qconv3.quantize_inference(qx)
        qx = self.qrelu3.quantize_inference(qx)
        qx = self.qmaxpool2d_3.quantize_inference(qx)
        qx = self.qconv4.quantize_inference(qx)
        qx = self.qrelu4.quantize_inference(qx)
        qx = self.qmaxpool2d_4.quantize_inference(qx)
        qx = self.qconv5.quantize_inference(qx)
        qx = self.qrelu5.quantize_inference(qx)
        qx = self.qmaxpool2d_5.quantize_inference(qx)
        qx = qx.view(-1, 128)
        qx = self.qfc1.quantize_inference(qx)
        qx = self.qrelu6.quantize_inference(qx)
        qx = self.qfc2.quantize_inference(qx)
        qx = self.qrelu7.quantize_inference(qx)
        qx = self.qfc3.quantize_inference(qx)
        out = self.qfc3.qo.dequantize_tensor(qx)
        return out


class NetBN(nn.Module):

    


    def quantize(self, num_bits=8):
        self.qconv1 = QConvBNReLU(self.conv1, self.bn1, qi=True, qo=True, num_bits=num_bits)
        self.qmaxpool2d_1 = QMaxPooling2d(kernel_size=2, stride=2, padding=0)
        self.qconv2 = QConvBNReLU(self.conv2, self.bn2, qi=False, qo=True, num_bits=4)
        self.qmaxpool2d_2 = QMaxPooling2d(kernel_size=2, stride=2, padding=0)
        self.qconv3 = QConvBNReLU(self.conv3, self.bn3, qi=False, qo=True, num_bits=4)
        self.qmaxpool2d_3 = QMaxPooling2d(kernel_size=2, stride=2, padding=0)
        self.qconv4 = QConvBNReLU(self.conv4, self.bn4, qi=False, qo=True, num_bits=4)
        self.qmaxpool2d_4 = QMaxPooling2d(kernel_size=2, stride=2, padding=0)
        self.qconv5 = QConvBNReLU(self.conv5, self.bn5, qi=False, qo=True, num_bits=4)
        self.qmaxpool2d_5 = QMaxPooling2d(kernel_size=2, stride=2, padding=0)
        self.qfc1 = QLinear(self.fc1, qi=False, qo=True, num_bits=4)
        self.qrelu6 = QReLU()
        self.qfc2 = QLinear(self.fc2, qi=False, qo=True, num_bits=4)
        self.qrelu7 = QReLU()
        self.qfc3 = QLinear(self.fc3, qi=False, qo=True, num_bits=num_bits)

    def quantize_forward(self, x):
        x = self.qconv1(x)
        x = self.qmaxpool2d_1(x)
        x = self.qconv2(x)
        x = self.qmaxpool2d_2(x)
        x = self.qconv3(x)
        x = self.qmaxpool2d_3(x)
        x = self.qconv4(x)
        x = self.qmaxpool2d_4(x)
        x = self.qconv5(x)
        x = self.qmaxpool2d_5(x)
        x = x.view(-1, 128)
        x = self.qfc1(x)
        x = self.qrelu6(x)
        x = self.qfc2(x)
        x = self.qrelu7(x)
        x = self.qfc3(x)
        return x

    def freeze(self):
        self.qconv1.freeze()
        self.qmaxpool2d_1.freeze(self.qconv1.qo)
        self.qconv2.freeze(qi=self.qconv1.qo)
        self.qmaxpool2d_2.freeze(self.qconv2.qo)
        self.qconv3.freeze(qi=self.qconv2.qo)
        self.qmaxpool2d_3.freeze(self.qconv3.qo)
        self.qconv4.freeze(qi=self.qconv3.qo)
        self.qmaxpool2d_4.freeze(self.qconv4.qo)
        self.qconv5.freeze(qi=self.qconv4.qo)
        self.qmaxpool2d_5.freeze(self.qconv5.qo)
        self.qfc1.freeze(qi=self.qconv5.qo)
        self.qrelu6.freeze(self.qfc1.qo)
        self.qfc2.freeze(qi=self.qfc1.qo)
        self.qrelu7.freeze(self.qfc2.qo)
        self.qfc3.freeze(qi=self.qfc2.qo)
        
    def quantize_inference(self, x):
        qx = self.qconv1.qi.quantize_tensor(x)
        qx = self.qconv1.quantize_inference(qx)
        qx = self.qmaxpool2d_1.quantize_inference(qx)
        qx = self.qconv2.quantize_inference(qx)
        qx = self.qmaxpool2d_2.quantize_inference(qx)
        qx = self.qconv3.quantize_inference(qx)
        qx = self.qmaxpool2d_3.quantize_inference(qx)
        qx = self.qconv4.quantize_inference(qx)
        qx = self.qmaxpool2d_4.quantize_inference(qx)
        qx = self.qconv5.quantize_inference(qx)
        qx = self.qmaxpool2d_5.quantize_inference(qx)
        qx = qx.view(-1, 128)
        qx = self.qfc1.quantize_inference(qx)
        qx = self.qrelu6.quantize_inference(qx)
        qx = self.qfc2.quantize_inference(qx)
        qx = self.qrelu7.quantize_inference(qx)
        qx = self.qfc3.quantize_inference(qx)
        out = self.qfc3.qo.dequantize_tensor(qx)
        return out